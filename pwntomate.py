#!/usr/bin/env python
# -*- coding: utf-8 -*-
# This software must not be used by military or secret service organisations.
# License: TODO
import os, sys, getopt, json
#from libnmap.process import NmapProcess
from libnmap.parser import NmapParser
version = '0.0.2#alpha'
greeter = '''
 ██▓███  █     ████▄    █▄▄▄█████▓▒█████  ███▄ ▄███▓▄▄▄    ▄▄▄█████▓█████
▓██░  ██▓█░ █ ░███ ▀█   █▓  ██▒ ▓▒██▒  ██▓██▒▀█▀ ██▒████▄  ▓  ██▒ ▓▓█   ▀
▓██░ ██▓▒█░ █ ░▓██  ▀█ ██▒ ▓██░ ▒▒██░  ██▓██    ▓██▒██  ▀█▄▒ ▓██░ ▒▒███
▒██▄█▓▒ ░█░ █ ░▓██▒  ▐▌██░ ▓██▓ ░▒██   ██▒██    ▒██░██▄▄▄▄█░ ▓██▓ ░▒▓█  ▄
▒██▒ ░  ░░██▒██▒██░   ▓██░ ▒██▒ ░░ ████▓▒▒██▒   ░██▒▓█   ▓██▒▒██▒ ░░▒████▒
▒▓▒░ ░  ░ ▓░▒ ▒░ ▒░   ▒ ▒  ▒ ░░  ░ ▒░▒░▒░░ ▒░   ░  ░▒▒   ▓▒█░▒ ░░  ░░ ▒░ ░
░▒ ░      ▒ ░ ░░ ░░   ░ ▒░   ░     ░ ▒ ▒░░  ░      ░ ▒   ▒▒ ░  ░    ░ ░  ░
░░        ░   ░   ░   ░ ░  ░     ░ ░ ░ ▒ ░      ░    ░   ▒   ░        ░
            ░           ░            ░ ░        ░        ░  ░         ░  ░
pwntomate %s
https://github.com/honze-net/pwntomate
''' % version
scriptname = os.path.basename(sys.argv[0])
usage = '''Usage:
%s [options]

Options:
 -h, --help
 -i, --inputxml PATH (nmap xml file)
 -b, --baseoutputdir PATH (path prefix for all outputs. scheme: baseoutputdir/ip/port/toolname)
''' % scriptname
inputxml = ''
baseoutputdir = '~/pwntomate'
toolsdir = os.path.join(os.path.dirname(os.path.abspath(__file__)), 'tools') #TODO: check for symbolic links
shellscript = '''#!/bin/bash
# autogenerated script by pwntomate %s
# https://github.com/honze-net/pwntomate
# %s
''' % (version, ' '.join(sys.argv)) # TODO: use shell varaible for baseoutputdir
print greeter
#print toolsdir
try:
    opts, args = getopt.getopt(sys.argv[1:],'b:hi:', ['help', 'inputxml=', 'baseoutputdir=', 'tools='])
except getopt.GetoptError:
    print 'Error parsing options:'
    print usage
    sys.exit(2)
if len(opts) == 0:
    print usage
    sys.exit()
for opt, arg in opts:
    if opt in ('-h', '--help'):
        print usage
        sys.exit()
    elif opt in ('-i', '--inputxml'):
        inputxml = arg
    elif opt in ('-b', '--baseoutputdir'):
        baseoutputdir = arg
if len(inputxml) > 0:
    #print 'reading %s ...' % inputxml
    try:
        report = NmapParser.parse_fromfile(inputxml)
    except IOError:
        print 'file %s not found' % inputxml
        sys.exit(1) # TODO: verify exit code
    #print 'The following hosts and services were found:'
    for host in report.hosts:
        #print host.address, host.hostnames
        for service in host.services:
            #print ' ', service.service, service.tunnel, service.port
            for filename in os.listdir(toolsdir): # TODO: add a command line option
                if filename.endswith(".tool"):
                    toolfile = open(os.path.join(toolsdir, filename), 'r')
                    tool = json.load(toolfile)
                    #print '%s: %s' % (tool["toolname"], tool["active"])
                    if tool["active"] and (service.service in tool["trigger"] or 'all' in tool["trigger"]):
                        cmd = tool["command"]
                        if service.tunnel == 'ssl':
                            cmd = cmd.replace("{s}", "s")
                        else:
                            cmd = cmd.replace("{s}", "")
                        cmd = cmd.replace("{ip}", host.address)
                        cmd = cmd.replace("{port}", str(service.port))
                        cmd = cmd.replace("{baseoutputdir}", baseoutputdir)
                        cmd = cmd.replace("{toolname}", tool["toolname"])
                        shellscript += 'mkdir -p %s/%s/%s/%s\n' % (baseoutputdir, host.address, service.port, tool["toolname"])
                        shellscript += '%s\n' % cmd
    print '\n' + shellscript #TODO baseoutputdir option to write shellscript
