#!/usr/bin/env python
# -*- coding: utf-8 -*-
# This software must not be used by military or secret service organisations.
# License: TODO

import os, sys, argparse, json, glob, subprocess
from libnmap.parser import NmapParser

greeter = '''[31m
 ‚ñà‚ñà‚ñì‚ñà‚ñà‚ñà  ‚ñà     ‚ñà‚ñà‚ñà‚ñà‚ñÑ    ‚ñà‚ñÑ‚ñÑ‚ñÑ‚ñà‚ñà‚ñà‚ñà‚ñà‚ñì‚ñí‚ñà‚ñà‚ñà‚ñà‚ñà  ‚ñà‚ñà‚ñà‚ñÑ ‚ñÑ‚ñà‚ñà‚ñà‚ñì‚ñÑ‚ñÑ‚ñÑ    ‚ñÑ‚ñÑ‚ñÑ‚ñà‚ñà‚ñà‚ñà‚ñà‚ñì‚ñà‚ñà‚ñà‚ñà‚ñà
 ‚ñì‚ñà‚ñà‚ñë  ‚ñà‚ñà‚ñì‚ñà‚ñë ‚ñà ‚ñë‚ñà‚ñà‚ñà ‚ñÄ‚ñà   ‚ñà‚ñì  ‚ñà‚ñà‚ñí ‚ñì‚ñí‚ñà‚ñà‚ñí  ‚ñà‚ñà‚ñì‚ñà‚ñà‚ñí‚ñÄ‚ñà‚ñÄ ‚ñà‚ñà‚ñí‚ñà‚ñà‚ñà‚ñà‚ñÑ  ‚ñì  ‚ñà‚ñà‚ñí ‚ñì‚ñì‚ñà   ‚ñÄ
 ‚ñì‚ñà‚ñà‚ñë ‚ñà‚ñà‚ñì‚ñí‚ñà‚ñë ‚ñà ‚ñë‚ñì‚ñà‚ñà  ‚ñÄ‚ñà ‚ñà‚ñà‚ñí ‚ñì‚ñà‚ñà‚ñë ‚ñí‚ñí‚ñà‚ñà‚ñë  ‚ñà‚ñà‚ñì‚ñà‚ñà    ‚ñì‚ñà‚ñà‚ñí‚ñà‚ñà  ‚ñÄ‚ñà‚ñÑ‚ñí ‚ñì‚ñà‚ñà‚ñë ‚ñí‚ñí‚ñà‚ñà‚ñà
 ‚ñí‚ñà‚ñà‚ñÑ‚ñà‚ñì‚ñí ‚ñë‚ñà‚ñë ‚ñà ‚ñë‚ñì‚ñà‚ñà‚ñí  ‚ñê‚ñå‚ñà‚ñà‚ñë ‚ñì‚ñà‚ñà‚ñì ‚ñë‚ñí‚ñà‚ñà   ‚ñà‚ñà‚ñí‚ñà‚ñà    ‚ñí‚ñà‚ñà‚ñë‚ñà‚ñà‚ñÑ‚ñÑ‚ñÑ‚ñÑ‚ñà‚ñë ‚ñì‚ñà‚ñà‚ñì ‚ñë‚ñí‚ñì‚ñà  ‚ñÑ
 ‚ñí‚ñà‚ñà‚ñí ‚ñë  ‚ñë‚ñë‚ñà‚ñà‚ñí‚ñà‚ñà‚ñí‚ñà‚ñà‚ñë   ‚ñì‚ñà‚ñà‚ñë ‚ñí‚ñà‚ñà‚ñí ‚ñë‚ñë ‚ñà‚ñà‚ñà‚ñà‚ñì‚ñí‚ñí‚ñà‚ñà‚ñí   ‚ñë‚ñà‚ñà‚ñí‚ñì‚ñà   ‚ñì‚ñà‚ñà‚ñí‚ñí‚ñà‚ñà‚ñí ‚ñë‚ñë‚ñí‚ñà‚ñà‚ñà‚ñà‚ñí
 ‚ñí‚ñì‚ñí‚ñë ‚ñë  ‚ñë ‚ñì‚ñë‚ñí ‚ñí‚ñë ‚ñí‚ñë   ‚ñí ‚ñí  ‚ñí ‚ñë‚ñë  ‚ñë ‚ñí‚ñë‚ñí‚ñë‚ñí‚ñë‚ñë ‚ñí‚ñë   ‚ñë  ‚ñë‚ñí‚ñí   ‚ñì‚ñí‚ñà‚ñë‚ñí ‚ñë‚ñë  ‚ñë‚ñë ‚ñí‚ñë ‚ñë
 ‚ñë‚ñí ‚ñë      ‚ñí ‚ñë ‚ñë‚ñë ‚ñë‚ñë   ‚ñë ‚ñí‚ñë   ‚ñë     ‚ñë ‚ñí ‚ñí‚ñë‚ñë  ‚ñë      ‚ñë ‚ñí   ‚ñí‚ñí ‚ñë  ‚ñë    ‚ñë ‚ñë  ‚ñë
 ‚ñë‚ñë        ‚ñë   ‚ñë   ‚ñë   ‚ñë ‚ñë  ‚ñë     ‚ñë ‚ñë ‚ñë ‚ñí ‚ñë      ‚ñë    ‚ñë   ‚ñí   ‚ñë        ‚ñë
             ‚ñë           ‚ñë            ‚ñë ‚ñë        ‚ñë        ‚ñë  ‚ñë         ‚ñë  ‚ñë
[0m'''

version = "0.0.3#beta" 

parser = argparse.ArgumentParser(description="pwntomate version " + version + "\nhttps://github.com/honze-net/pwntomate", epilog="This software must not be used by military or secret service organisations.", formatter_class=argparse.RawDescriptionHelpFormatter)
parser.add_argument("xml", help="path to Nmap XML file")
parser.add_argument("-b", help="path to base directory for tool output (default: ~/.pwntomate)", default="~/.pwntomate", dest="basedir")
parser.add_argument("-t", help="path to custom tool directory (default: ./tools)", default="./tools", dest="tooldir")
parser.add_argument("-x", help="Executes the generated script automatically. (Be careful!)", action="store_true", dest="execute")
if len(sys.argv) == 1: # If no arguments are specified, print greeter, help and exit.
    print greeter
    parser.print_help()
    sys.exit(1)    
args = parser.parse_args()

try:
    report = NmapParser.parse_fromfile(args.xml)
except IOError:
    print 'file %s not found' % args.xml
    sys.exit(1)
shellscript = '''#!/bin/bash
# autogenerated script by pwntomate %s
# https://github.com/honze-net/pwntomate
''' % version

for host in report.hosts:
    for service in host.services:
        for filename in glob.glob(args.tooldir+"/*.tool"):
            tool = json.load(open(filename, 'r'))
            if tool["active"] and (service.service in tool["trigger"] or 'all' in tool["trigger"]):
                cmd = tool["command"]
                if service.tunnel == 'ssl':
                    cmd = cmd.replace("{s}", "s")
                else:
                    cmd = cmd.replace("{s}", "")
                    cmd = cmd.replace("{outputdir}", "{baseoutputdir}/{ip}/{port}/{toolname}") # make this configurable
                    cmd = cmd.replace("{ip}", host.address)
                    cmd = cmd.replace("{port}", str(service.port))
                    cmd = cmd.replace("{baseoutputdir}", args.basedir.replace(" ", "\ "))
                    cmd = cmd.replace("{toolname}", tool["toolname"].replace(" ", "\ "))
                    shellscript += 'mkdir -p %s/%s/%s/%s\n' % (args.basedir.replace(" ", "\ "), host.address, service.port, tool["toolname"].replace(" ", "\ ")) # TODO remove double configuration of {baseoutputdir}/{ip}/{port}/{toolname}. things can go wrong.
                    shellscript += '%s\n' % cmd
if args.execute:
    subprocess.call(shellscript, shell=True)
else:
    print shellscript
