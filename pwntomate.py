#!/usr/bin/env python
# -*- coding: utf-8 -*-
# This software must not be used by military or secret service organisations.
# License: TODO

import os, sys, getopt
#from libnmap.process import NmapProcess
from libnmap.parser import NmapParser

version = '0.0.1#alpha'
greeter = '''
 ██▓███  █     ████▄    █▄▄▄█████▓▒█████  ███▄ ▄███▓▄▄▄    ▄▄▄█████▓█████
▓██░  ██▓█░ █ ░███ ▀█   █▓  ██▒ ▓▒██▒  ██▓██▒▀█▀ ██▒████▄  ▓  ██▒ ▓▓█   ▀
▓██░ ██▓▒█░ █ ░▓██  ▀█ ██▒ ▓██░ ▒▒██░  ██▓██    ▓██▒██  ▀█▄▒ ▓██░ ▒▒███
▒██▄█▓▒ ░█░ █ ░▓██▒  ▐▌██░ ▓██▓ ░▒██   ██▒██    ▒██░██▄▄▄▄█░ ▓██▓ ░▒▓█  ▄
▒██▒ ░  ░░██▒██▒██░   ▓██░ ▒██▒ ░░ ████▓▒▒██▒   ░██▒▓█   ▓██▒▒██▒ ░░▒████▒
▒▓▒░ ░  ░ ▓░▒ ▒░ ▒░   ▒ ▒  ▒ ░░  ░ ▒░▒░▒░░ ▒░   ░  ░▒▒   ▓▒█░▒ ░░  ░░ ▒░ ░
░▒ ░      ▒ ░ ░░ ░░   ░ ▒░   ░     ░ ▒ ▒░░  ░      ░ ▒   ▒▒ ░  ░    ░ ░  ░
░░        ░   ░   ░   ░ ░  ░     ░ ░ ░ ▒ ░      ░    ░   ▒   ░        ░
            ░           ░            ░ ░        ░        ░  ░         ░  ░
pwntomate %s
https://github.com/honze-net/pwntomate
''' % version
scriptname = os.path.basename(sys.argv[0])
usage = '''Usage:
%s [options]

Options:
 -h, --help
 --scan TARGETS (not implemented)
 --scanxml PATH (nmap xml file)
 --output PATH (path prefix for all outputs. scheme: output/ip/port/tool)
 --tools LISTOFTOOLS (not implemented)
''' % scriptname
scan = ''
scanxml = ''
output = ''
tools = ''
shellscript = '''#!/bin/bash
# autogenerated script by pwntomate %s
# %s
''' % (version, ' '.join(sys.argv))

print greeter

try:
    opts, args = getopt.getopt(sys.argv[1:],'h', ['help', 'scan=', 'scanxml=', 'output=', 'tools='])
except getopt.GetoptError:
    print 'Error parsing options:'
    print usage
    sys.exit(2)
if len(opts) == 0:
    print usage
    sys.exit()
# TODO: Make the evaluation better.
for opt, arg in opts:
    if opt in ('-h', '--help'):
        print usage
        sys.exit()
    elif opt in ('--scan'):
        scan = arg
    elif opt in ('--scanxml'):
        scanxml = arg
    elif opt in ('--output'):
        output = arg
    elif opt in ('--tools'):
        tools = arg
# TODO: sanity check: '[scan|scanxml] output tools'


if len(scanxml) > 0:
    #print 'reading %s ...' % scanxml
    try:
        report = NmapParser.parse_fromfile(scanxml)
    except IOError:
        print 'file %s not found' % scanxml
        sys.exit(1) # TODO: verify exit code
    #print 'The following hosts and services were found:'
    for host in report.hosts:
        #print host.address, host.hostnames
        for service in host.services:
            #print ' ', service.service, service.tunnel, service.port
            if service.service == 'ssh':
                #TODO cli calls for every tool
                cmd = 'ssh-audit -b %s %s > %s/%s/%s/ssh-audit.txt' % (host.address, service.port, output, host.address, service.port)
                shellscript += 'mkdir -p %s/%s/%s\n' % (output, host.address, service.port)
                shellscript += '%s\n' % cmd
                #print '    building os command: %s' % cmd
            elif service.service == 'http':
                cmd = 'nikto -host %s -port %s -output %s/%s/%s/nikto.html' % (host.hostnames[0], service.port, output, host.address, service.port)
                #print '    building os command: %s' % cmd
                shellscript += 'mkdir -p %s/%s/%s\n' % (output, host.address, service.port)
                shellscript += '%s\n' % cmd
                if service.tunnel == 'ssl': #https
                    cmd = 'dirb https://%s:%s -o %s/%s/%s/dirb.txt' % (host.hostnames[0], service.port, output, host.address, service.port)
                    #print '    building os command: %s' % cmd
                    shellscript += 'mkdir -p %s/%s/%s\n' % (output, host.address, service.port)
                    shellscript += '%s\n' % cmd
                    cmd = 'sslyze --regular --xml_out=- %s:%s > %s/%s/%s/sslyze.xml' % (host.hostnames[0], service.port, output, host.address, service.port)
                    #print '    building os command: %s' % cmd
                    shellscript += 'mkdir -p %s/%s/%s\n' % (output, host.address, service.port)
                    shellscript += '%s\n' % cmd
                else: #http
                    cmd = 'dirb http://%s:%s -o %s/%s/%s/dirb.txt' % (host.hostnames[0], service.port, output, host.address, service.port)
                    #print '    building os command: %s' % cmd
                    shellscript += 'mkdir -p %s/%s/%s\n' % (output, host.address, service.port)
                    shellscript += '%s\n' % cmd
    print '\n' + shellscript #TODO output option to write shellscript
